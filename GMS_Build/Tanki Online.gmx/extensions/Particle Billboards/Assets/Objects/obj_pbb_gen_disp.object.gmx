<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Shader-based Billboards</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables &amp; resources
// TODO: rectangular frame dimensions
no_frames = 64;     // Number of frames, must be square e.g. 8^2, 4^2

//show_debug_message(ceil(log2(no_frames)));
//sqrt(power(2,ceil(log2(no_frames)))); // Hmm.. =&gt; WIP

w = 128;            // Frame dimensions, currently square
h = w;

sf_billboards = -1;             // Initialize surface
pbb_create_frames();

sf = surface_create(w,h);       // Temporary surface for single frame

sys = part_system_create();     // Provide a particle system

part_system_automatic_draw(sys,false);  // Manual redraw and update
part_system_automatic_update(sys,false);

update_interval = 1;            // Particle system update interval
alarm[0] = update_interval;

angle = 0;                      // Billboard orientation angle (deg)

buffer = vertex_create_buffer();// Initialize vertex buffer
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize debug functionality
cur_prev = current; // Most recently rendered frame index

// Keep track of particle count on each image
for(var i = 0;i &lt; no_frames;i++) {
    count[i] = 0;
}

// Keep track of frame offsets per display
dbg_offset = 0;

// Total displayed number of particles
disp_particles_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free surfaces
if (surface_exists(sf_billboards))surface_free(sf_billboards);
if (surface_exists(sf)) surface_free(sf);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy particle system
part_system_destroy(sys);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete vertex buffer
vertex_delete_buffer(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update particle system
part_system_update(sys);
alarm[0] = update_interval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update current frame
if (!surface_exists(sf)) {
    sf = surface_create(w,h);   // Small problem, simply recreate surface
}
surface_set_target(sf);

d3d_set_projection_ortho(0,0,w,h,0);
d3d_transform_stack_push();
d3d_transform_set_identity();

draw_clear_alpha(c_white,0);

part_system_drawit(sys);

d3d_transform_stack_pop();

surface_reset_target();

if (!surface_exists(sf_billboards)) {
    // Big problem =&gt; all frames lost
    sf_billboards = surface_create(tex_size,tex_size);  // That's that already...
    pbb_render_frames();
} else {
    // surface_copy_part() works fine for this!
    // Note that, for some reason, you need to set the render target to sf_billboards...
    surface_set_target(sf_billboards);
    
    var x_index = current div row_count;
    var y_index = current mod row_count;
    
    surface_copy_part(sf_billboards,x_index*w,y_index*w,sf,0,0,w,h);
    //draw_surface_part(sf,0,0,128,128,0,0);   // HTML5?
    
    surface_reset_target();
}

current = (current+1) mod no_frames;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Post-update debug stuff
count[cur_prev] = part_particles_count(sys);    //cur_prev!

disp_particles_count = 0;
for(var i = 0;i &lt; array_length_1d(dbg_offset);i++) {
    var frame_index = (dbg_offset[i] + cur_prev) mod no_frames;
    disp_particles_count += count[frame_index];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visibility check
visible = (buffer != -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pre-update debug stuff
cur_prev = current;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw billboards
var tex = surface_get_texture(sf_billboards);

var fw = texture_get_width(tex)/row_count*texture_get_texel_width(tex);
var fh = texture_get_height(tex)/row_count*texture_get_texel_height(tex);

shader_set(sha_billboards);

// Pass uniforms
var cur = shader_get_uniform(sha_billboards,"u_iCurrent");
shader_set_uniform_f(cur,current);

var fsize = shader_get_uniform(sha_billboards,"u_vFrameSize");
shader_set_uniform_f(fsize,fw,fh);

var no_frs = shader_get_uniform(sha_billboards,"u_fNoFrames");
shader_set_uniform_f(no_frs,no_frames);

var cpr = shader_get_uniform(sha_billboards,"u_iCountPerRow");
shader_set_uniform_f(cpr,row_count);

var cam_dir = shader_get_uniform(sha_billboards,"u_fCamDir");
shader_set_uniform_f(cam_dir,degtorad(angle+90));

// Draw buffer, turn off z-writing
d3d_transform_stack_push();
d3d_transform_set_translation(x,y,0);
d3d_set_zwriteenable(false);
vertex_submit(buffer,pr_trianglelist,tex);  // only single texture =&gt; no swaps required
d3d_set_zwriteenable(true);
d3d_transform_stack_pop();

shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
